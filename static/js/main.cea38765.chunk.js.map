{"version":3,"sources":["view/modules/explore/homePage/homePage.tsx","view/redux/actions/login/index.ts","view/modules/components/google.tsx","view/modules/explore/loginPage/LoginPage.tsx","view/navigation/index.tsx","AppContainer.tsx","view/redux/reducers/login/index.ts","view/redux/reducers/index.ts","view/redux/store/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["HomePage","showUser","user","props","fullName","key","src","img","this","to","Component","connect","state","loginPageReducer","loginReducer","dispatch","bindActionCreators","GET_USER","getUser","payload","type","Google","responseGoogle","response","profileObj","clientId","buttonText","onSuccess","onFailure","cookiePolicy","aut","LoginPage","componentDidMount","_handelSubmit","event","preventDefault","_handelChange","target","value","checked","name","setState","isLoading","u_name","u_pass","isAut","console","log","pathname","userName","className","onSubmit","onChange","role","ModalSwitch","location","useLocation","background","exact","path","children","AppContainer","basename","initialState","email","firstName","lastName","combineReducers","action","familyName","givenName","imageUrl","appReducer","store","createStore","App","Boolean","window","hostname","match","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","analytics","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cea38765.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { bindActionCreators } from 'redux';\r\nimport { connect } from 'react-redux';\r\n\r\ninterface IProp {\r\n    user: any\r\n}\r\ninterface IState {\r\n\r\n}\r\nclass HomePage extends Component<IProp, IState> {\r\n\r\n\r\n    showUser = () => {\r\n        const { user } = this.props;\r\n        if (user.fullName) {\r\n            return (\r\n                <div key={user.fullName}>\r\n                    <h2>Wellcome {user.fullName}</h2>\r\n                    <p>Email: </p>\r\n                    <img src={user.img} />\r\n                </div>\r\n            )\r\n        } else {\r\n            return \"\"\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h2>Trang chá»§</h2>\r\n                {this.showUser()}\r\n                <Link to=\"/product\">Prodcut</Link>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: any) => {\r\n    return {\r\n        user: state.loginPageReducer.loginReducer.user\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: any) => bindActionCreators(\r\n    {\r\n    },\r\n    dispatch,\r\n);\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(HomePage)","export const GET_USER = 'GET_USER';\r\n\r\n\r\n\r\n\r\nexport const getUser = (payload: any) => {\r\n    return {\r\n        type: GET_USER,\r\n        payload\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { GoogleLogin } from 'react-google-login';\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\n\r\nimport { getUser } from '../../redux/actions/login';\r\ninterface Iprop {\r\n    getUser: any\r\n}\r\ninterface Istate {\r\n\r\n}\r\n\r\nclass Google extends Component<Iprop, Istate> {\r\n\r\n\r\n    responseGoogle = (response: any) => {\r\n        this.props.getUser(response.profileObj)\r\n    }\r\n    render() {\r\n        return (\r\n            <GoogleLogin\r\n                clientId=\"542888842456-42cgb7rjm61ptik5lmso138co2hoaem2.apps.googleusercontent.com\"\r\n                buttonText=\"Login\"\r\n                onSuccess={this.responseGoogle}\r\n                onFailure={this.responseGoogle}\r\n                cookiePolicy={'single_host_origin'}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: any) => {\r\n    return {\r\n        aut: state.loginPageReducer\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: any) => bindActionCreators(\r\n    {\r\n        getUser\r\n    },\r\n    dispatch,\r\n);\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Google)","import React, { Component } from 'react'\r\nimport { Redirect } from 'react-router';\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\n\r\n\r\n\r\nimport FaceBooks from '../../components/FaceBooks';\r\nimport Google from '../../components/google';\r\nimport { getUser } from '../../../redux/actions/login';\r\ninterface IProps {\r\n    getUser: any,\r\n    isAut: any\r\n}\r\ninterface IStates {\r\n    isLoading: any,\r\n    u_name: any,\r\n    u_pass: any,\r\n}\r\n\r\nclass LoginPage extends Component<IProps, IStates> {\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        this.state = {\r\n            isLoading: false,\r\n            u_name: \"\",\r\n            u_pass: \"\"\r\n        }\r\n    }\r\n\r\n    componentDidMount = () => {\r\n    }\r\n\r\n    _handelSubmit = (event: any) => {\r\n        event.preventDefault();\r\n        this.props.getUser()\r\n        // this.setState((preState) => {\r\n        //     return {\r\n        //         ...preState,\r\n        //         isLoading: true,\r\n        //     }\r\n        // })\r\n        // setTimeout(() => {\r\n        //     this.setState((preState) => {\r\n        //         return {\r\n        //             ...preState,\r\n        //             isLoading: false,\r\n        //             isAut: true,\r\n        //         }\r\n        //     })\r\n        // }, 3000);\r\n\r\n    }\r\n    _handelChange = (event: any) => {\r\n        const target = event.target;\r\n        const value = target.type === 'checkbox' ? target.checked : target.value;\r\n        const name: any = target.name;\r\n\r\n        // @ts-ignore\r\n        this.setState({\r\n            [name]: value\r\n        });\r\n    }\r\n    render() {\r\n        const { isLoading } = this.state;\r\n        const { isAut } = this.props;\r\n        console.log(this.props);\r\n\r\n        if (isAut == true) {\r\n            return <Redirect to={{ pathname: \"/home\", state: { userName: \"\" } }} />\r\n        } else {\r\n            return (\r\n                <div className=\"row d-flex justify-content-center mt-5\">\r\n                    <div className=\"col-4\">\r\n\r\n                        <form onSubmit={this._handelSubmit}>\r\n                            <h3>Form Login</h3>\r\n                            <div className=\"form-group\">\r\n                                <input onChange={this._handelChange} name=\"u_name\" value={this.state.u_name} className=\"form-control\" />\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <input onChange={this._handelChange} name=\"u_pass\" value={this.state.u_pass} className=\"form-control\" />\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <input className=\"btn btn-primary\" type=\"submit\" value=\"Login\" />\r\n                                <Google />\r\n                            </div>\r\n                            {/* <FaceBooks /> */}\r\n                            {\r\n                                (isLoading) ? (\r\n                                    <div className=\"spinner-border\" role=\"status\">\r\n                                        <span className=\"sr-only\">Loading...</span>\r\n                                    </div>\r\n                                ) : null\r\n                            }\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: any) => {\r\n    return {\r\n        isAut: state.loginPageReducer.loginReducer.isAut\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: any) => bindActionCreators(\r\n    {\r\n        getUser\r\n    },\r\n    dispatch,\r\n);\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginPage)","import React from 'react'\r\nimport {\r\n    Switch,\r\n    Route,\r\n    useLocation\r\n} from \"react-router-dom\";\r\n\r\n\r\nimport HomePage from '../modules/explore/homePage/homePage';\r\nimport ProductPage from '../modules/explore/productPage/ProductPage';\r\nimport LoginPage from '../modules/explore/loginPage/LoginPage';\r\n\r\n\r\nexport default function ModalSwitch() {\r\n    let location = useLocation();\r\n    let background = location.state && location.state.background;\r\n\r\n    return (\r\n        <Switch location={background || location}>\r\n            <Route exact path=\"/\" children={<LoginPage />} />\r\n            <Route path=\"/home\" children={<HomePage />} />\r\n        </Switch>\r\n    );\r\n}\r\n","import React, { Component } from 'react'\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\nimport ModalSwitch from './view/navigation';\r\n\r\nexport default class AppContainer extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <Router basename=\"/\">\r\n                <ModalSwitch />\r\n            </Router>\r\n        )\r\n    }\r\n}\r\n","import { combineReducers } from \"redux\"\r\nimport { GET_USER } from \"../../actions/login\";\r\n\r\n\r\nconst initialState = {\r\n    isAut: false,\r\n    user: {\r\n        fullName: null,\r\n        email: null,\r\n        firstName: null,\r\n        lastName: null,\r\n        img: null\r\n    }\r\n}\r\n\r\n\r\nexport function loginReducer(state: any = initialState, action: any) {\r\n    switch (action.type) {\r\n        case GET_USER:\r\n            console.log(action);\r\n            const user = action.payload;\r\n            return {\r\n                ...state,\r\n                isAut: true,\r\n                user: {\r\n                    fullName: user.name,\r\n                    email: user.email,\r\n                    firstName: user.familyName,\r\n                    lastName: user.givenName,\r\n                    img: user.imageUrl\r\n                },\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const loginPageReducer = combineReducers({\r\n    loginReducer,\r\n})","import { combineReducers } from \"redux\";\r\nimport { loginPageReducer } from \"./login/index\"\r\n\r\n\r\nexport const appReducer = combineReducers({\r\n    loginPageReducer\r\n});\r\n\r\nexport const rootReducer = (state: any, action: any) => {\r\n    return appReducer(state, action);\r\n};\r\n\r\n","import { createStore } from \"redux\";\r\nimport { rootReducer } from \"../reducers\";\r\n\r\n\r\n\r\nconst store = createStore(rootReducer);\r\n\r\nexport default store;","import React, { Component } from 'react';\r\nimport { Provider } from 'react-redux'\r\n\r\nimport './App.scss';\r\nimport AppContainer from './AppContainer';\r\nimport store from './view/redux/store';\r\n\r\ninterface IProps {\r\n\r\n}\r\n\r\ninterface IState {\r\n}\r\n\r\n\r\n// import Button from './view/components/button';\r\n\r\nclass App extends Component<IProps, IState> {\r\n\tconstructor(props: IProps) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {}\r\n\t}\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<Provider store={store}>\r\n\t\t\t\t<AppContainer />\r\n\t\t\t</Provider>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport firebase from 'firebase/app';\r\nimport 'firebase/database';\r\nimport 'firebase/storage';\r\nimport 'firebase/analytics';\r\n\r\nvar firebaseConfig = {\r\n    apiKey: \"AIzaSyBk5dvWkTPNsVYX7P-Jdiix1Jn3wOLGGDA\",\r\n    authDomain: \"github-4fe6d.firebaseapp.com\",\r\n    databaseURL: \"https://github-4fe6d.firebaseio.com\",\r\n    projectId: \"github-4fe6d\",\r\n    storageBucket: \"github-4fe6d.appspot.com\",\r\n    messagingSenderId: \"1040095152319\",\r\n    appId: \"1:1040095152319:web:36983efe3836536b8a5e0a\",\r\n    measurementId: \"G-EGQCR9DMB3\"\r\n};\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\nfirebase.analytics();\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}