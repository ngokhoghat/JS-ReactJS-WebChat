{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["responseGoogle","response","console","log","responseFacebook","App","props","componentDidMount","state","speed","className","clientId","buttonText","onSuccess","onFailure","cookiePolicy","appId","autoLoad","fields","callback","cssClass","icon","version","Component","Boolean","window","location","hostname","match","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","measurementId","analytics","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2QAWMA,EAAiB,SAACC,GACvBC,QAAQC,IAAIF,IAEPG,EAAmB,SAACH,GACzBC,QAAQC,IAAIF,IAgDEI,E,YA3Cd,WAAYC,GAAgB,IAAD,8BAC1B,4CAAMA,KAKPC,kBAAoB,aAJnB,EAAKC,MAAQ,CACZC,MAAO,MAHkB,E,sEAoB1B,OACC,yBAAKC,UAAU,OACd,kBAAC,cAAD,CACCC,SAAS,2EACTC,WAAW,QACXC,UAAWb,EACXc,UAAWd,EACXe,aAAc,uBAEf,kBAAC,IAAD,CACCC,MAAM,mBACNC,UAAU,EACVC,OAAO,qBACPC,SAAUf,EACVgB,SAAS,2BACTC,KAAK,cACLC,QAAQ,a,GArCKC,aCPEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,sCCENC,IAASC,cAXY,CACjBC,OAAQ,0CACRC,WAAY,+BACZC,YAAa,sCACbC,UAAW,eACXC,cAAe,2BACfC,kBAAmB,gBACnBpB,MAAO,6CACPqB,cAAe,iBAInBR,IAASS,YAETC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDkH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.f0c10aa2.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './App.scss';\r\nimport { GoogleLogin } from 'react-google-login';\r\nimport FacebookLogin from 'react-facebook-login';\r\ninterface IProps {\r\n\r\n}\r\n\r\ninterface IState {\r\n\tspeed: any\r\n}\r\nconst responseGoogle = (response: any) => {\r\n\tconsole.log(response);\r\n}\r\nconst responseFacebook = (response: any) => {\r\n\tconsole.log(response);\r\n}\r\n// import Button from './view/components/button';\r\n\r\nclass App extends Component<IProps, IState> {\r\n\tconstructor(props: IProps) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tspeed: null\r\n\t\t}\r\n\t}\r\n\tcomponentDidMount = () => {\r\n\t\t// const rootRef = firebase.database().ref().child('react');\r\n\t\t// const speedRef = rootRef.child('speed');\r\n\t\t// speedRef.on('value', snap => {\r\n\t\t//   console.log(snap.val());\r\n\r\n\t\t//   this.setState({\r\n\t\t//     speed: snap.val()\r\n\t\t//   })\r\n\t\t// })\r\n\t\t// console.log(speedRef);\r\n\r\n\t}\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"App\" >\r\n\t\t\t\t<GoogleLogin\r\n\t\t\t\t\tclientId=\"542888842456-42cgb7rjm61ptik5lmso138co2hoaem2.apps.googleusercontent.com\"\r\n\t\t\t\t\tbuttonText=\"Login\"\r\n\t\t\t\t\tonSuccess={responseGoogle}\r\n\t\t\t\t\tonFailure={responseGoogle}\r\n\t\t\t\t\tcookiePolicy={'single_host_origin'}\r\n\t\t\t\t/>\r\n\t\t\t\t<FacebookLogin\r\n\t\t\t\t\tappId=\"2506281752983102\"\r\n\t\t\t\t\tautoLoad={true}\r\n\t\t\t\t\tfields=\"name,email,picture\"\r\n\t\t\t\t\tcallback={responseFacebook}\r\n\t\t\t\t\tcssClass=\"my-facebook-button-class\"\r\n\t\t\t\t\ticon=\"fa-facebook\"\r\n\t\t\t\t\tversion=\"3.1\"\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport firebase from 'firebase/app';\r\nimport 'firebase/database';\r\nimport 'firebase/storage';\r\nimport 'firebase/analytics';\r\n\r\nvar firebaseConfig = {\r\n    apiKey: \"AIzaSyBk5dvWkTPNsVYX7P-Jdiix1Jn3wOLGGDA\",\r\n    authDomain: \"github-4fe6d.firebaseapp.com\",\r\n    databaseURL: \"https://github-4fe6d.firebaseio.com\",\r\n    projectId: \"github-4fe6d\",\r\n    storageBucket: \"github-4fe6d.appspot.com\",\r\n    messagingSenderId: \"1040095152319\",\r\n    appId: \"1:1040095152319:web:36983efe3836536b8a5e0a\",\r\n    measurementId: \"G-EGQCR9DMB3\"\r\n};\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\nfirebase.analytics();\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}